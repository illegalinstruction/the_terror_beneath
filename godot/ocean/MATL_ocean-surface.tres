[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[ext_resource path="res://ocean/ocean-normal.png" type="Texture" id=1]
[ext_resource path="res://ocean/ocean-height.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx, async_visible;

uniform sampler2D texmap_height;
uniform sampler2D texmap_normal;



void vertex() {
// Input:10
	vec3 n_out10p0 = VERTEX;

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// VectorOp:22
	vec3 n_in22p1 = vec3(0.80000, 0.80000, 0.00000);
	vec3 n_out22p0 = n_out5p0 * n_in22p1;

// VectorDecompose:6
	float n_out6p0 = n_out22p0.x;
	float n_out6p1 = n_out22p0.y;
	float n_out6p2 = n_out22p0.z;

// Input:2
	float n_out2p0 = TIME;

// ScalarOp:3
	float n_in3p1 = 0.13790;
	float n_out3p0 = n_out2p0 * n_in3p1;

// ScalarOp:7
	float n_out7p0 = n_out6p0 + n_out3p0;

// ScalarOp:11
	float n_in11p1 = 0.10250;
	float n_out11p0 = n_out2p0 * n_in11p1;

// ScalarOp:12
	float n_out12p0 = n_out6p1 + n_out11p0;

// VectorCompose:8
	float n_in8p2 = 0.00000;
	vec3 n_out8p0 = vec3(n_out7p0, n_out12p0, n_in8p2);

// Texture:4
	vec4 texmap_height_read = texture(texmap_height, n_out8p0.xy);
	vec3 n_out4p0 = texmap_height_read.rgb;
	float n_out4p1 = texmap_height_read.a;

// VectorDecompose:14
	float n_out14p0 = n_out4p0.x;
	float n_out14p1 = n_out4p0.y;
	float n_out14p2 = n_out4p0.z;

// VectorCompose:15
	float n_in15p0 = 0.00000;
	float n_in15p2 = 0.00000;
	vec3 n_out15p0 = vec3(n_in15p0, n_out14p0, n_in15p2);

// VectorOp:13
	vec3 n_out13p0 = n_out10p0 + n_out15p0;

// Texture:9
	vec4 texmap_normal_read = texture(texmap_normal, n_out8p0.xy);
	vec3 n_out9p0 = texmap_normal_read.rgb;
	float n_out9p1 = texmap_normal_read.a;

// VectorDecompose:17
	float n_out17p0 = n_out9p0.x;
	float n_out17p1 = n_out9p0.y;
	float n_out17p2 = n_out9p0.z;

// ScalarOp:19
	float n_in19p1 = -1.00000;
	float n_out19p0 = n_out17p2 * n_in19p1;

// VectorCompose:18
	vec3 n_out18p0 = vec3(n_out17p0, n_out19p0, n_out17p1);

// VectorOp:20
	vec3 n_in20p1 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out20p0 = n_out18p0 - n_in20p1;

// VectorOp:21
	vec3 n_in21p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out21p0 = n_out20p0 * n_in21p1;

// Output:0
	VERTEX = n_out13p0;
	NORMAL = n_out21p0;
}

void fragment() {
// Color:27
	vec3 n_out27p0 = vec3(0.000706, 0.039885, 0.069785);
	float n_out27p1 = 1.000000;

// Input:9
	mat4 n_out9p0 = CAMERA_MATRIX;

// Input:5
	vec3 n_out5p0 = NORMAL;

// TransformVectorMult:6
	vec3 n_out6p0 = (n_out9p0 * vec4(n_out5p0, 1.0)).xyz;

// VectorFunc:10
	vec3 n_out10p0 = normalize(n_out6p0);

// VectorDecompose:7
	float n_out7p0 = n_out10p0.x;
	float n_out7p1 = n_out10p0.y;
	float n_out7p2 = n_out10p0.z;

// Scalar:2
	float n_out2p0 = 0.000000;

// Output:0
	ALBEDO = n_out27p0;
	METALLIC = n_out7p0;
	ROUGHNESS = n_out2p0;
	EMISSION = n_out27p0;

}

void light() {
// Output:0

}
"

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/texmap_height = ExtResource( 2 )
shader_param/texmap_normal = ExtResource( 1 )
