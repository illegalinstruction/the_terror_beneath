[gd_scene load_steps=10 format=2]

[ext_resource path="res://submarine/SUBMARINE_VISIBLE.tscn" type="PackedScene" id=1]
[ext_resource path="res://backdrop/wavy_coral/coral_01a.tscn" type="PackedScene" id=2]
[ext_resource path="res://backdrop/wavy_coral/coral_02d.tscn" type="PackedScene" id=3]
[ext_resource path="res://backdrop/wavy_coral/coral_02a.tscn" type="PackedScene" id=4]
[ext_resource path="res://backdrop/brain_coral/brain-coral-01.tscn" type="PackedScene" id=5]
[ext_resource path="res://backdrop/wavy_coral/coral_02b.tscn" type="PackedScene" id=6]

[sub_resource type="GDScript" id=2]
script/source = "# 
#  _the terror_               
# | |        | |              
# | |__   ___| | _____      __
# | '_ \\ / _ \\ |/ _ \\ \\ /\\ / /
# | |_) |  __/ | (_) \\ V  V / 
# |_.__/ \\___|_|\\___/ \\_/\\_/ 
#
# Copyright 2022 Oregon Institute of Technology
# 
# Permission is hereby granted, free of charge, to any person obtaining 
# a copy of this software and associated documentation files (the 
# \"Software\"), to deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, merge, publish, 
# distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to 
# the following conditions:
# 
# * The above copyright notice and this permission notice shall be 
# 	included in all copies or substantial portions of the Software.
# 
# * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, 
# 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
#	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#                                              
# This file based upon pre-existing work by C. Rogers.                                              
#                                              

extends Node2D;

#==============================================================================
# GAME STATE MANAGEMENT
#==============================================================================

# gamestate tracking variables
var  curr_game_state : int;
var  next_game_state : int;
var  curr_state_done : bool = false;

# named constants for the various gamestates 
enum GAME_STATES {
   MAIN_MENU,
   GAMEPLAY,
   SAVE_LOAD,
   OPTIONS_MENU,
   TROPHY_ROOM,
   EXIT
};

# mapping between gamestate names and file names on disk
var game_states_dict = {
   GAME_STATES.MAIN_MENU:   \"main_menu\",
   GAME_STATES.GAMEPLAY:    \"gameplay\",
   GAME_STATES.EXIT:        \"exit\"
};

#-----------------------------------------------------------------------------
# handle_gamestate_switch()
#   checks if the current state is done, and if yes, switches to the next 
#   state.  should be called every frame.
#
func handle_gamestate_switch():
	if (curr_state_done):

		# discard the old gamestate...
		var old_state_tmp = get_node(game_states_dict[curr_game_state]);
		remove_child(old_state_tmp);
		old_state_tmp.call_deferred(\"free\");
	
		# and load the new one.
		curr_game_state   = next_game_state;
		var new_state_tmp = load(\"res://\" + game_states_dict[next_game_state] + \".tscn\");
		add_child(new_state_tmp.instance());
		curr_state_done   = false;

	return;

#-----------------------------------------------------------------------------

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN);
	set_process(true);
   
	# set initial gamestate - this is almost always going to be main menu or splash
	curr_state_done = false;
	curr_game_state = GAME_STATES.MAIN_MENU;
	#var scene_loading_tmp = load(\"res://\" + game_states_dict[curr_game_state] + \".tscn\");
	
	#add_child(scene_loading_tmp.instance());

	Global.set_bgm(0);

	return;

##############################################################################
# Main loop 
#
# warning-ignore:unused_argument
func _process(delta):
	handle_gamestate_switch();
	Global.handle_bgm_fading();
	Global.handle_joystick_connect();
	Global.poll_joystick();

	# alt+f4 = insta-quit
	if (Input.is_key_pressed(KEY_ALT) and Input.is_key_pressed(KEY_F4)):
		get_tree().quit();

	return;
"

[sub_resource type="GDScript" id=1]
script/source = "# 
#  _the terror_               
# | |        | |              
# | |__   ___| | _____      __
# | '_ \\ / _ \\ |/ _ \\ \\ /\\ / /
# | |_) |  __/ | (_) \\ V  V / 
# |_.__/ \\___|_|\\___/ \\_/\\_/ 
#
# Copyright 2022 Oregon Institute of Technology
# 
# Permission is hereby granted, free of charge, to any person obtaining 
# a copy of this software and associated documentation files (the 
# \"Software\"), to deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, merge, publish, 
# distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to 
# the following conditions:
# 
# * The above copyright notice and this permission notice shall be 
# 	included in all copies or substantial portions of the Software.
# 
# * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, 
# 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
#	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#                                              

extends Label

func _ready():
	set_text(Timestamp.BUILD_DATE + \"\\n\" + Timestamp.BUILD_STAMP);

"

[sub_resource type="GDScript" id=3]
script/source = "# 
#  _the terror_               
# | |        | |              
# | |__   ___| | _____      __
# | '_ \\ / _ \\ |/ _ \\ \\ /\\ / /
# | |_) |  __/ | (_) \\ V  V / 
# |_.__/ \\___|_|\\___/ \\_/\\_/ 
#
# Copyright 2022 Oregon Institute of Technology
# 
# Permission is hereby granted, free of charge, to any person obtaining 
# a copy of this software and associated documentation files (the 
# \"Software\"), to deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, merge, publish, 
# distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to 
# the following conditions:
# 
# * The above copyright notice and this permission notice shall be 
# 	included in all copies or substantial portions of the Software.
# 
# * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, 
# 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
#	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#                                              

extends Label

#----------------------------------------------------------------------------

func _ready():
	set_process(true);
	
	return;

#----------------------------------------------------------------------------

func _process(_ignore):
	self.set_text(\"input: left stick  deflection:\" + str(Global._left_stick_distance) + \" angle:\" + str(Global._left_stick_angle) + \"  A: \" + str(Global._button_a) + \"  B: \" + str(Global._button_b)+ \"  X: \" + str(Global._button_x)+ \"  Y: \" + str(Global._button_y) + \" use joypad? \" + str(Global.use_joystick));	
"

[node name="application_root" type="Node2D"]
script = SubResource( 2 )

[node name="only_debugging_info_lives_here" type="CanvasLayer" parent="."]
layer = 128

[node name="git_info" type="Label" parent="only_debugging_info_lives_here"]
margin_left = 1019.0
margin_top = 5.0
margin_right = 1276.0
margin_bottom = 36.0
custom_colors/font_color = Color( 0, 1, 0.156863, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
custom_constants/shadow_offset_x = 1
custom_constants/shadow_offset_y = 1
text = "test
test"
align = 2
script = SubResource( 1 )

[node name="input_info" type="Label" parent="only_debugging_info_lives_here"]
margin_right = 40.0
margin_bottom = 14.0
custom_colors/font_color = Color( 0, 1, 0.0862745, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
custom_constants/shadow_offset_x = 1
custom_constants/shadow_offset_y = 1
script = SubResource( 3 )

[node name="Spatial" type="Spatial" parent="."]

[node name="SUBMARINE_VISIBLE_ROOT" parent="Spatial" instance=ExtResource( 1 )]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 5.549, 0, 0 )
PROP_SPINUP = 0.056
ELEVON_SPEED = 0.87
MAX_PROP_SPEED = 15.0
prop_desired_speed = 8.646
elevon_desired_angle = 35.0

[node name="Camera" type="Camera" parent="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -6.31176, 0.827553, 10.1474 )

[node name="coral_02a" parent="Spatial" instance=ExtResource( 4 )]
transform = Transform( 0.999695, -0.0174497, 0.0174524, 0.0174524, 0.999848, 0, -0.0174497, 0.000304586, 0.999848, -10.2313, 0.235839, 1.66539 )

[node name="coral_01a 001" parent="Spatial" instance=ExtResource( 2 )]

[node name="coral_01a 002" parent="Spatial" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1.312, 0, 0 )

[node name="coral_01a 003" parent="Spatial" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3.205, 0, 0 )

[node name="coral_01a 004" parent="Spatial" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -5.00939, 0, 0 )

[node name="coral_01a 005" parent="Spatial" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -8.70034, 0, 0 )

[node name="coral_01a 006" parent="Spatial" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -12.3658, 0, 0 )

[node name="coral_01a 007" parent="Spatial" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -15.6012, 0, 0 )

[node name="coral_01a 009" parent="Spatial" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -19.1578, 0, 0 )

[node name="coral_01a 010" parent="Spatial" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -6.90186, 0, 0 )

[node name="coral_02d 000" parent="Spatial" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -10.4184, 0, 0 )

[node name="coral_02d 001" parent="Spatial" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -14.4373, 0, 0 )

[node name="coral_02d 002" parent="Spatial" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -11.4084, 0, 0 )

[node name="brain-coral-01" parent="Spatial" instance=ExtResource( 5 )]
transform = Transform( 0.945901, -0.18282, 0.268046, 0.189764, 0.98183, 0, -0.263175, 0.0508653, 0.963406, -0.671067, 0.352948, -2.52053 )

[node name="coral_02b" parent="Spatial" instance=ExtResource( 6 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -11.377, 0, 1.2719 )
