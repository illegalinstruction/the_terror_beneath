[gd_scene load_steps=18 format=2]

[ext_resource path="res://submarine/SUBMARINE_VISIBLE.tscn" type="PackedScene" id=1]
[ext_resource path="res://ocean/ocean-impostor.tscn" type="PackedScene" id=2]
[ext_resource path="res://entities/jelly_01/jelly_01.tscn" type="PackedScene" id=3]
[ext_resource path="res://loop-texture.tres" type="Shader" id=4]
[ext_resource path="res://hud.tscn" type="PackedScene" id=6]
[ext_resource path="res://entities/humpback/humpback.glb" type="PackedScene" id=14]

[sub_resource type="GDScript" id=37]
script/source = "# 
#  _the terror_               
# | |        | |              
# | |__   ___| | _____      __
# | '_ \\ / _ \\ |/ _ \\ \\ /\\ / /
# | |_) |  __/ | (_) \\ V  V / 
# |_.__/ \\___|_|\\___/ \\_/\\_/ 
#
# Copyright 2022 Oregon Institute of Technology
# 
# Permission is hereby granted, free of charge, to any person obtaining 
# a copy of this software and associated documentation files (the 
# \"Software\"), to deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, merge, publish, 
# distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to 
# the following conditions:
# 
# * The above copyright notice and this permission notice shall be 
# 	included in all copies or substantial portions of the Software.
# 
# * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, 
# 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
#	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#                                 

extends Node2D;


func spawn_sonar_ping_effect(in_pos : Vector2, in_distance : float, in_caption: String=\"\"):
    $hud.spawn_sonar_ping_effect(in_pos,in_distance,in_caption);
    return;
    
#---------------------------------------------------------------------------------------------------

func set_elec_display(elec:float):
    $hud.set_elec(elec);
    return;
    
#---------------------------------------------------------------------------------------------------
    
func spawn_surfacing_effect():
    $ViewportContainer.spawn_surfacing_effect();    

#---------------------------------------------------------------------------------------------------

func set_o2_display(o2:float):
    $hud.set_o2(o2);
    return;

#---------------------------------------------------------------------------------------------------

func set_depth_display(depth:float):
    $hud.set_depth(depth);
    return;

#---------------------------------------------------------------------------------------------------

func set_distance_from_shore_display(distance:float):
    $hud.set_distance_from_shore(distance);
    return;

#---------------------------------------------------------------------------------------------------

func _ready():
    set_process(true);
    return;

#--------------------------------------------------------------------

func _process(delta):
    return;
"

[sub_resource type="ViewportTexture" id=32]
viewport_path = NodePath("ViewportContainer/Viewport")

[sub_resource type="ShaderMaterial" id=31]
resource_local_to_scene = true
shader = ExtResource( 4 )
shader_param/sub_depth = -2000.0
shader_param/tex_frg_22 = SubResource( 32 )

[sub_resource type="GDScript" id=35]
script/source = "# 
#  _the terror_               
# | |        | |              
# | |__   ___| | _____      __
# | '_ \\ / _ \\ |/ _ \\ \\ /\\ / /
# | |_) |  __/ | (_) \\ V  V / 
# |_.__/ \\___|_|\\___/ \\_/\\_/ 
#
# Copyright 2022 Oregon Institute of Technology
# 
# Permission is hereby granted, free of charge, to any person obtaining 
# a copy of this software and associated documentation files (the 
# \"Software\"), to deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, merge, publish, 
# distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to 
# the following conditions:
# 
# * The above copyright notice and this permission notice shall be 
# 	included in all copies or substantial portions of the Software.
# 
# * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, 
# 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
#	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#                                 

extends ViewportContainer

var drip_tex : AnimatedTexture = null;

#---------------------------------------------------------------------------------------------------

func _ready():
    set_process(true);
    drip_tex = load(\"res://HUD/surface_drip.tres\");
    material.set(\"shader_param/tex_frg_25\", drip_tex);
    return;

#---------------------------------------------------------------------------------------------------



func spawn_surfacing_effect():
    drip_tex.set_current_frame(0);
    return;

#---------------------------------------------------------------------------------------------------

func _process(_ignore):
    material.set(\"shader_param/sub_depth\", $Viewport/gameplay/kinbody_SUBMARINE.translation.y);
    return;
"

[sub_resource type="GDScript" id=2]
script/source = "# 
#  _the terror_               
# | |        | |              
# | |__   ___| | _____      __
# | '_ \\ / _ \\ |/ _ \\ \\ /\\ / /
# | |_) |  __/ | (_) \\ V  V / 
# |_.__/ \\___|_|\\___/ \\_/\\_/ 
#
# Copyright 2022 Oregon Institute of Technology
# 
# Permission is hereby granted, free of charge, to any person obtaining 
# a copy of this software and associated documentation files (the 
# \"Software\"), to deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, merge, publish, 
# distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to 
# the following conditions:
# 
# * The above copyright notice and this permission notice shall be 
# 	included in all copies or substantial portions of the Software.
# 
# * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, 
# 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
#	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#                                 

extends Spatial;

#----------------------------------------------------------------------------

const SUN_SURFACE_COLOUR : Color = Color(1.0, 0.95, 0.90);
const SUN_DEPTH_ATTENUATOR : Color = Color(0.93, 0.98, 0.9875);

const SKY_TOP_COLOUR : Color = Color(0.188,0.639,0.89);
const SKY_HORZ_COLOUR : Color = Color(0.839,0.918,0.98);
const GND_HORZ_COLOUR : Color = Color(0.729,0.867,0.906);
const GND_BOT_COLOUR : Color = Color(0.129, 0.357, 0.494);
const FOG_COLOUR : Color = Color(\"18c5db\");

const MIN_X : float = 16.0;
const MAX_X : float = 10240.0;
const MIN_Y : float = -7200.0; # in meters
const MAX_Y : float = 0.95; # float on surface

const SUNLIGHT_ZONE_DEPTH : float = -200.0;
const TWILIGHT_ZONE_DEPTH : float = -800.0;
const MIDNIGHT_ZONE_DEPTH : float = -2400.0;
const ABYSSAL_ZONE_DEPTH : float = -5500.0;

const OCEAN_IMPOSTOR_DROPDOWN_DEPTH = -65.0;

const IN_GAME_SONG_MAX_INDEX = 4; # please fix when there are more tracks submitted!

var test_disc : Discovery;
var test_disc2 : Discovery;
var test_disc3 : Discovery;
var test_disc4 : Discovery;

#----------------------------------------------------------------------------

func _ready():
    # load savegame here, position discoveries and sub
    
    set_process(true);
    rand_seed(OS.get_ticks_msec());

    Global.set_bgm(int(rand_range(1,IN_GAME_SONG_MAX_INDEX + 0.5))); 
    var tmp = preload(\"res://DISCOVERY.gd\");
    test_disc = tmp.new();
    test_disc2 = tmp.new();
    test_disc3 = tmp.new();
    test_disc4 = tmp.new();

    test_disc.init_from_json_at_pos(\"res://entities/json/001.json\",50,-25,$HUD,$Camera);
    test_disc2.init_from_json_at_pos(\"res://entities/json/001.json\",120,-60,$HUD,$Camera);
    test_disc3.init_from_json_at_pos(\"res://entities/json/001.json\",90,-35,$HUD,$Camera);
    test_disc4.init_from_json_at_pos(\"res://entities/json/001.json\",80,-40,$HUD,$Camera);

    add_child(test_disc);
    add_child(test_disc2);
    add_child(test_disc3);
    add_child(test_disc4);
    return; 

#----------------------------------------------------------------------------

func on_sonar():
    # to do - make discoveries an array and iterate through them
    test_disc.on_sonar($kinbody_SUBMARINE.translation);
    test_disc2.on_sonar($kinbody_SUBMARINE.translation);
    test_disc3.on_sonar($kinbody_SUBMARINE.translation);
    test_disc4.on_sonar($kinbody_SUBMARINE.translation);

#----------------------------------------------------------------------------

func adjust_sun_by_sub_depth():
    var tmp : Color;
    tmp.r = pow(SUN_DEPTH_ATTENUATOR.r, -$kinbody_SUBMARINE.translation.y / 2.0);
    tmp.g = pow(SUN_DEPTH_ATTENUATOR.g, -$kinbody_SUBMARINE.translation.y / 2.0);
    tmp.b = pow(SUN_DEPTH_ATTENUATOR.b, -$kinbody_SUBMARINE.translation.y / 2.0);
    
    $DirectionalLight.light_color = SUN_SURFACE_COLOUR * tmp;
    
    #--- handle midnight zone
    var sky_darken_factor : Color;
    sky_darken_factor.r  = clamp(
        (-SUNLIGHT_ZONE_DEPTH + $kinbody_SUBMARINE.translation.y) / 80.0,
        0.0, 
        1.0);

    sky_darken_factor.g  = clamp(
        (-SUNLIGHT_ZONE_DEPTH + $kinbody_SUBMARINE.translation.y) / 84.5,
        0.0, 
        1.0);

    sky_darken_factor.b  = clamp(
        (-SUNLIGHT_ZONE_DEPTH + $kinbody_SUBMARINE.translation.y) / 85.0,
        0.0, 
        1.0);

    $WorldEnvironment.environment.background_sky.sky_top_color = SKY_TOP_COLOUR * sky_darken_factor;
    $WorldEnvironment.environment.background_sky.sky_horizon_color = SKY_HORZ_COLOUR * sky_darken_factor;
    $WorldEnvironment.environment.background_sky.ground_horizon_color = GND_HORZ_COLOUR * sky_darken_factor;
    $WorldEnvironment.environment.background_sky.ground_bottom_color = GND_BOT_COLOUR * sky_darken_factor;
        
    $WorldEnvironment.environment.background_sky.sky_energy = sky_darken_factor.r;
    $WorldEnvironment.environment.background_sky.ground_energy = sky_darken_factor.r;
    
    # -- fog colour
    # make the distance darken a little faster than the sunlight
    tmp.r = smoothstep(.1,1.0,tmp.r);
    tmp.g = smoothstep(.0905,1.0,tmp.g);
    tmp.b = smoothstep(.09,1.0,tmp.b);
    $WorldEnvironment.environment.fog_color = FOG_COLOUR * tmp;
    
    
    return;

#----------------------------------------------------------------------------

func _process(delta):

    # move the ocean imposter alongside the ship
    $\"ocean-impostor\".translation.z = $kinbody_SUBMARINE.translation.z;
    if ($kinbody_SUBMARINE.translation.y < OCEAN_IMPOSTOR_DROPDOWN_DEPTH):
        $\"ocean-impostor\".translation.y = ($kinbody_SUBMARINE.translation.y - OCEAN_IMPOSTOR_DROPDOWN_DEPTH);
    else:
        $\"ocean-impostor\".translation.y = 0.0;
    
    adjust_sun_by_sub_depth();
    
    
    get_tree().get_current_scene().set_distance_from_shore_display(-$kinbody_SUBMARINE.translation.z + MIN_X);
    
    get_tree().get_current_scene().set_depth_display($kinbody_SUBMARINE.translation.y / -2.0);
    #$HUD.SUB_DEPTH = $kinbody_SUBMARINE.translation.y / 2.0;
    
    # did the current song end?  start a new one.
    if (Global.is_bgm_done()):
        print(\"tryna play next song\");
        Global.set_bgm(int(rand_range(1,IN_GAME_SONG_MAX_INDEX + 0.5)), false); 
   
    return;

#----------------------------------------------------------------------------

func _on_player_died():
    var screenwipe = load(\"res://helper_screenwipe.tscn\");
    Global.change_scene_to(load(\"res://drowned.tscn\"));
    Global.new_scene_screenwipe_start();
    
"

[sub_resource type="GDScript" id=5]
script/source = "# 
#  _the terror_               
# | |        | |              
# | |__   ___| | _____      __
# | '_ \\ / _ \\ |/ _ \\ \\ /\\ / / 
# | |_) |  __/ | (_) \\ V  V / 
# |_.__/ \\___|_|\\___/ \\_/\\_/ 
#
# Copyright 2022 Oregon Institute of Technology
# 
# Permission is hereby granted, free of charge, to any person obtaining 
# a copy of this software and associated documentation files (the 
# \"Software\"), to deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, merge, publish, 
# distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to 
# the following conditions:
# 
# * The above copyright notice and this permission notice shall be 
# 	included in all copies or substantial portions of the Software.
# 
# * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, 
# 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
#	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#                                              
#----------------------------------------------------------------------------

extends KinematicBody

#--- private local vars -----------------------------------------------------

var curr_electricity : float;
var curr_o2 : float;
var curr_sulfur : float;

var flash_bulb : float;

var is_facing_left : bool;

var curr_velocity : Vector3;

var snd_sonar_charge : AudioStreamPlayer;
var snd_sonar_fire : AudioStreamPlayer;

const SONAR_CHARGE_TIME : int = 70; #in frames
var sonar_charge_counter : int = -1;

var bob_anim_clock : int = 0; #part of the fix for #83, increments once per frame

#----------------------------------------------------------------------------

func _ready():
    set_process(true);
    curr_electricity = Global.SUBMARINE_MAX_ELECTRICITY;
    curr_o2 = Global.SUBMARINE_MAX_O2;
    
    snd_sonar_charge = AudioStreamPlayer.new();
    snd_sonar_fire = AudioStreamPlayer.new();
    
    snd_sonar_charge.stream = load(\"res://HUD/sounds/sonar_charge.wav\");
    snd_sonar_fire.stream = load(\"res://HUD/sounds/sonar_fire.wav\");

    snd_sonar_charge.volume_db = Global.get_sfx_vol_in_db();
    snd_sonar_fire.volume_db = Global.get_sfx_vol_in_db();
    
    add_child(snd_sonar_charge);
    add_child(snd_sonar_fire);
    
    bob_anim_clock = 0;
  
    return; # Replace with function body.

#----------------------------------------------------------------------------

func _process(time_elapsed):
    #== respond to input ======================================================
    if (Global._left_stick_distance >= Global.ANALOGUE_DEAD_ZONE):
        # do we have charge to run the motor?
        if (curr_electricity > 0.0):
            # yes

            # navigation
            var veloc_add : Vector3 = Vector3.ZERO;
            veloc_add.z = Global._left_stick_x * -Global.SUBMARINE_ACCELERATION;
            veloc_add.y = Global._left_stick_y * -Global.SUBMARINE_ACCELERATION;
        
            curr_velocity += veloc_add;
        
            # make submarine turn around if traveling left or right
            if (Global._left_stick_x > 0):
                is_facing_left = false;
            else:
                if (Global._left_stick_x < 0):
                    is_facing_left = true;
    
    #=  animation & physics ==================================================
    # smooth anim of the sub turning around
    if (is_facing_left):
        if (rotation_degrees.y > 0.1):
            rotation_degrees.y -= Global.SUBMARINE_TURN_SPEED * abs(0.1 - rotation_degrees.y) / 100.0;
    else:
        if (rotation_degrees.y < 179.9):
            rotation_degrees.y += Global.SUBMARINE_TURN_SPEED * abs(179.9 - rotation_degrees.y) / 100.0;
        
    # sub prop and fins anim
    # again, do we have charge to run the motor?
    if (curr_electricity > 0.0):
        $SUBMARINE_VISIBLE_ROOT.prop_desired_speed = (Global._left_stick_distance * 15.0); 
        $SUBMARINE_VISIBLE_ROOT.elevon_desired_angle = Global._left_stick_y * 35;
    else:
        $SUBMARINE_VISIBLE_ROOT.prop_desired_speed = 0.0; 
        $SUBMARINE_VISIBLE_ROOT.elevon_desired_angle = 0.0;
        
    # speed cap
    if (curr_velocity.length() > Global.SUBMARINE_MAX_VELOCITY):
        curr_velocity = (curr_velocity.normalized() * Global.SUBMARINE_MAX_VELOCITY);
        
    # buoyancy
    curr_velocity.y += Global.SUBMARINE_IDLE_BUOYANCY;

    # drag
    curr_velocity *= Global.SUBMARINE_DRAG_MULT_FACTOR;
    
    # VERY near the surface?
    if (curr_velocity.y > translation.y):
        get_tree().get_current_scene().spawn_surfacing_effect();
    
    # let the physics run
    # warning-ignore:return_value_discarded
    move_and_collide(curr_velocity);
    
    # are we above the surface? clamp to 0, bounce downwards
    if (translation.y > get_parent().MAX_Y):
        curr_velocity.y = -(curr_velocity.y / 1.25);
        translation.y = get_parent().MAX_Y; 
        
    # don't go out of bounds, either
    if (translation.z < -get_parent().MAX_X):
        translation.z = -get_parent().MAX_X;
        curr_velocity.z = -(curr_velocity.z / 2.0);

    if (translation.z > -get_parent().MIN_X):
        translation.z = -get_parent().MIN_X;
        curr_velocity.z = -(curr_velocity.z / 2.0);

    #== handle pending sonar firing ==========================================
    if (sonar_charge_counter > -1): 
        sonar_charge_counter -= 1;
    
    if (sonar_charge_counter == 0):
        $\"..\".on_sonar(); 
        get_tree().get_current_scene().spawn_sonar_ping_effect($\"../Camera\".unproject_position(self.translation),0.00000);
        snd_sonar_fire.play();

    #== handle sonar key/btn =================================================
    if (Global._button_a == Global.BUTTON_STATE.PRESSED):
        if ((curr_electricity > Global.SUBMARINE_SONAR_COST) and (sonar_charge_counter < 1)):
            sonar_charge_counter = SONAR_CHARGE_TIME;
            curr_electricity -= Global.SUBMARINE_SONAR_COST;
            snd_sonar_charge.play();

    #== update  battery  =====================================================
    # are we accelerating?
    if (Global._left_stick_distance >= Global.ANALOGUE_DEAD_ZONE):
        # yes - assess motor electricity cost
        curr_electricity -= Global.SUBMARINE_ELEC_COST_PER_SECOND * time_elapsed;
    else:
        # no - recharging
        curr_electricity += Global.SUBMARINE_ELEC_RECHARGE_PER_SECOND * time_elapsed;
        
    if (curr_electricity < 0.0):
        curr_electricity = 0.0;
        
    # don't allow charging over 100%
    if (curr_electricity > Global.SUBMARINE_MAX_ELECTRICITY):
        curr_electricity = Global.SUBMARINE_MAX_ELECTRICITY;
        
    #== update o2 ============================================================
    # are we on the surface?
    if (translation.y > -0.5):
        curr_o2 += Global.SUBMARINE_O2_RECHARGE_PER_SECOND * time_elapsed;
    else:
        curr_o2 -= Global.SUBMARINE_O2_COST_PER_SECOND * time_elapsed;
        
    if (curr_o2 < 0.0):
        curr_o2 = 0.0;
        get_parent()._on_player_died();

    if (curr_o2 > Global.SUBMARINE_MAX_O2):
        curr_o2 = Global.SUBMARINE_MAX_O2;

    #== update hud ============================================================
    get_tree().get_current_scene().set_elec_display((curr_electricity / Global.SUBMARINE_MAX_ELECTRICITY) * 100.0);
    get_tree().get_current_scene().set_o2_display((curr_o2 / Global.SUBMARINE_MAX_O2) * 100.0);

    #== #83 - bob slightly above -2m to make it look like =====================
    #== the waves interact with us ============================================
    bob_anim_clock += 1;
    var between_0_and_5 =  clamp(translation.y + 5.0, 0.0, 5.0);
    $SUBMARINE_VISIBLE_ROOT.translation.y = (
        cos(bob_anim_clock/43.7) * between_0_and_5/31.0) - (between_0_and_5 / 12.0);
    
    return;
"

[sub_resource type="CapsuleShape" id=1]
height = 2.15938

[sub_resource type="GDScript" id=6]
script/source = "# 
#  _the terror_               
# | |        | |              
# | |__   ___| | _____      __
# | '_ \\ / _ \\ |/ _ \\ \\ /\\ / /
# | |_) |  __/ | (_) \\ V  V / 
# |_.__/ \\___|_|\\___/ \\_/\\_/ 
#
# Copyright 2022 Oregon Institute of Technology
# 
# Permission is hereby granted, free of charge, to any person obtaining 
# a copy of this software and associated documentation files (the 
# \"Software\"), to deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, merge, publish, 
# distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to 
# the following conditions:
# 
# * The above copyright notice and this permission notice shall be 
# 	included in all copies or substantial portions of the Software.
# 
# * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, 
# 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
#	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#                                              

extends Camera

export var CAMERA_ACCELERATION : float = 0.125;

#----------------------------------------------------------------------------

func _ready():
	set_process(true);
	return;

#----------------------------------------------------------------------------

func _process(_ignore):
	var speed : Vector3;
	speed.z = (translation.z - $\"../kinbody_SUBMARINE\".translation.z) * CAMERA_ACCELERATION;	
	speed.y = (translation.y - $\"../kinbody_SUBMARINE\".translation.y) * CAMERA_ACCELERATION;

	translation.z -= speed.z;
	translation.y -= speed.y;
	

"

[sub_resource type="ProceduralSky" id=7]
sky_top_color = Color( 0.188235, 0.639216, 0.890196, 1 )
ground_bottom_color = Color( 0.129412, 0.356863, 0.494118, 1 )
ground_horizon_color = Color( 0.729412, 0.866667, 0.905882, 1 )

[sub_resource type="Environment" id=8]
background_mode = 2
background_sky = SubResource( 7 )
fog_enabled = true
fog_color = Color( 0.0941176, 0.772549, 0.858824, 1 )
fog_depth_begin = 2.0
fog_depth_end = 48.0
fog_depth_curve = 1.51572

[sub_resource type="GDScript" id=4]
script/source = "
# 
#  _the terror_               
# | |        | |              
# | |__   ___| | _____      __
# | '_ \\ / _ \\ |/ _ \\ \\ /\\ / / 
# | |_) |  __/ | (_) \\ V  V / 
# |_.__/ \\___|_|\\___/ \\_/\\_/ 
#
# Copyright 2022 Oregon Institute of Technology
# 
# Permission is hereby granted, free of charge, to any person obtaining 
# a copy of this software and associated documentation files (the 
# \"Software\"), to deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, merge, publish, 
# distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to 
# the following conditions:
# 
# * The above copyright notice and this permission notice shall be 
# 	included in all copies or substantial portions of the Software.
# 
# * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, 
# 	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# 	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
#	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#                                              

extends Label

#----------------------------------------------------------------------------

func _ready():
    if (Global.DEBUG_MODE):
        set_process(true);
        show();
    else:
        hide();
    return;

#----------------------------------------------------------------------------

func _process(_ignore):
    self.set_text(\"input: left stick  deflection:\" + str(Global._left_stick_distance) + \" angle:\" + str(rad2deg(Global._left_stick_angle)) + 
        \"\\n  A: \" + str(Global._button_a) + \"  B: \" + str(Global._button_b)+ \"  X: \" + str(Global._button_x)+ \"  Y: \" + str(Global._button_y) + 
        \"\\n use joypad? \" + str(Global.use_joystick) + \"\\n \" +
        \"submarine angle: \" + str($\"../ViewportContainer/Viewport/gameplay/kinbody_SUBMARINE\".rotation_degrees.y) + \"\\n\" +
        \"submarine pos: \" + str($\"../ViewportContainer/Viewport/gameplay/kinbody_SUBMARINE\".translation) + \"\\n\" +
        \"submarine vel: \" + str($\"../ViewportContainer/Viewport/gameplay/kinbody_SUBMARINE\".get(\"curr_velocity\")));
"

[node name="gameplay_root" type="Node2D"]
script = SubResource( 37 )

[node name="ViewportContainer" type="ViewportContainer" parent="."]
material = SubResource( 31 )
margin_right = 40.0
margin_bottom = 40.0
script = SubResource( 35 )

[node name="Viewport" type="Viewport" parent="ViewportContainer"]
size = Vector2( 1280, 720 )
handle_input_locally = false
render_target_update_mode = 3
audio_listener_enable_2d = true
audio_listener_enable_3d = true

[node name="gameplay" type="Spatial" parent="ViewportContainer/Viewport"]
script = SubResource( 2 )

[node name="kinbody_SUBMARINE" type="KinematicBody" parent="ViewportContainer/Viewport/gameplay"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 7.12431, -27.1066, 0 )
axis_lock_motion_x = true
move_lock_x = true
script = SubResource( 5 )

[node name="SUBMARINE_VISIBLE_ROOT" parent="ViewportContainer/Viewport/gameplay/kinbody_SUBMARINE" instance=ExtResource( 1 )]

[node name="CollisionShape" type="CollisionShape" parent="ViewportContainer/Viewport/gameplay/kinbody_SUBMARINE"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.518984 )
shape = SubResource( 1 )

[node name="Camera" type="Camera" parent="ViewportContainer/Viewport/gameplay"]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 15.8524, 0, 0 )
script = SubResource( 6 )

[node name="ReflectionProbe" type="ReflectionProbe" parent="ViewportContainer/Viewport/gameplay/Camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -13.466 )
extents = Vector3( 32, 8, 32 )
origin_offset = Vector3( 0, 0, 14.278 )

[node name="jelly_01" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 8.33724, -3.34893, -17.5462 )

[node name="jelly_02" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 3 )]
transform = Transform( 0.351172, 0, 0.936311, 0, 1, 0, -0.936311, 0, 0.351172, 6.80288, -6.89922, -20.3978 )

[node name="jelly_03" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 3 )]
transform = Transform( 0.351172, 0, 0.936311, 0, 1, 0, -0.936311, 0, 0.351172, 0.736505, -36.6966, -20.3978 )

[node name="jelly_04" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 3 )]
transform = Transform( 0.351172, 0, 0.936311, 0, 1, 0, -0.936311, 0, 0.351172, -1.52471, -64.0717, -20.3978 )

[node name="jelly_05" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 3 )]
transform = Transform( 0.351172, 0, 0.936311, 0, 1, 0, -0.936311, 0, 0.351172, -8.23917, -64.0717, -43.4917 )

[node name="jelly_06" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 3 )]
transform = Transform( 0.351172, 0, 0.936311, 0, 1, 0, -0.936311, 0, 0.351172, -2.27515, -64.0717, -43.4917 )

[node name="jelly_07" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 3 )]
transform = Transform( 0.351172, 0, 0.936311, 0, 1, 0, -0.936311, 0, 0.351172, -13.7145, -64.0717, -43.4917 )

[node name="jelly_08" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 3 )]
transform = Transform( 0.617969, 0, 0.786202, 0, 1, 0, -0.786202, 0, 0.617969, -13.7145, -64.0717, -43.4917 )

[node name="jelly_09" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 3 )]
transform = Transform( 0.617969, 0, 0.786202, 0, 1, 0, -0.786202, 0, 0.617969, -19.6442, -64.0717, -43.4917 )

[node name="jelly_10" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 3 )]
transform = Transform( 0.617969, 0, 0.786202, 0, 1, 0, -0.786202, 0, 0.617969, -19.6442, -64.0717, -43.4917 )

[node name="DirectionalLight" type="DirectionalLight" parent="ViewportContainer/Viewport/gameplay"]
transform = Transform( 0.960915, -0.219362, 0.168889, 0, 0.610048, 0.792364, -0.276845, -0.761394, 0.586204, 0, 0, 0 )
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="ViewportContainer/Viewport/gameplay"]
environment = SubResource( 8 )

[node name="humpback" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 14 )]
transform = Transform( -0.0532771, 0, 0.99858, 0, 1, 0, -0.99858, 0, -0.0532771, 5.41834, -52.9938, 17.1058 )

[node name="humpback2" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 14 )]
transform = Transform( -0.567989, -0.324871, 0.756206, -0.524088, 0.851205, -0.0279616, -0.634602, -0.4122, -0.653736, 4.97567, -53.149, -18.1822 )

[node name="humpback3" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 14 )]
transform = Transform( -0.325693, 0.630269, -0.704758, 0.593759, 0.716427, 0.366308, 0.735781, -0.299153, -0.607564, 7.9932, -53.149, -48.317 )

[node name="humpback4" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 14 )]
transform = Transform( -0.0847676, -0.0587562, -0.994667, -0.369747, 0.928838, -0.0233564, 0.925257, 0.365795, -0.100461, 2.25252, -64.7478, -62.5723 )

[node name="ocean-impostor" parent="ViewportContainer/Viewport/gameplay" instance=ExtResource( 2 )]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0 )

[node name="hud" parent="." instance=ExtResource( 6 )]

[node name="debug_sub" type="Label" parent="."]
visible = false
margin_left = 32.0
margin_top = 96.0
margin_right = 72.0
margin_bottom = 110.0
custom_colors/font_color = Color( 1, 0.498039, 0, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
custom_constants/shadow_as_outline = 0
script = SubResource( 4 )
